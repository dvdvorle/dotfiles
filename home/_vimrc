" vim: set foldmarker={,} foldlevel=1 foldmethod=marker nospell:

" Environment {
  set nocompatible     " must be first line

  " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
  " across (heterogeneous) systems easier. 
  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
  set packpath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
" }

" General {
  set background=dark                 " Assume a dark background
  if !has('win32') && !has('win64') && has($TERM)
      set term=$TERM                  " Make arrow and other keys work
  endif

  filetype plugin indent on " Automatically detect file types.
  syntax on                 " syntax highlighting
  set mouse=a					      " automatically enable mouse usage
  set encoding=utf-8
  scriptencoding utf-8
  set fileformats=unix,dos                        " Use lf by default, even on windows

  set autochdir                                   " automatically change the working directory to that of the current file
  set autowrite                                   " automatically write a file when leaving a modified buffer
  set autoread                                    " automatically reload files that have changed outside of Vim (and not yet inside)
  set hidden
  set shortmess+=filmnrxoOtT     	                " abbrev. of messages (avoids 'hit enter')
  set diffopt+=vertical                           " lets diff windows always split vertically
  set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
  set splitbelow                                  " Put new windows below
  set splitright                                  " Put new windows on the right
  set history=1000                                " Store a ton of history (default is 20)
  set nospell                                     " spell checking off
  au! BufWritePost $MYVIMRC so $MYVIMRC           " immediately apply changes to _vimrc
  set clipboard=unnamed                           " Use OS clipboard

  set includeexpr=substitute(v:fname,'\$PSScriptRoot','.','g') " Allow gf to work in pwsh scripts

  set backup 						                          " backups are nice, their location is set blow in InitializeDirectories()
  au BufWrite * silent! mkview                    " make vim save view (state) (folds, cursor, etc)
  au BufRead * silent! loadview                   " make vim load view (state) (folds, cursor, etc)
" }

" Vim UI {
  color wombat                  " load a colorscheme
  set tabpagemax=15             " only show 15 tabs
  set showmode                  " display the current mode

  set cursorline                " highlight current line
  hi cursorline guibg=#333333   " highlight bg color of current line
  hi CursorColumn guibg=#333333 " highlight cursor

  if has('cmdline_info')
    set ruler                                          " show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
    set showcmd                                        " show partial commands in status line and
                                                       " selected characters/lines in visual mode
  endif

  if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\     " Filename
    set statusline+=%w%h%m%r " Options

    set statusline+=\ [%{&ff}/%Y]            " filetype
    set statusline+=\ [%{getcwd()}]          " current dir
    "set statusline+=\ [A=\%03.3b/H=\%02.2B]  " ASCII / Hexadecimal value of char
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
  endif

  set guifont=Consolas:h10        " Set font
  " set backspace=indent,eol,start " backspace for dummys
  set linespace=0					        " No extra spaces between rows
  set nu							            " Line numbers on
  set showmatch					          " show matching brackets/parenthesis
  set incsearch					          " find as you type search
  set hlsearch					          " highlight search terms
  set winminheight=0				      " windows can be 0 line high 
  set ignorecase					        " case insensitive search
  set smartcase					          " case sensitive when uc present
  set wildmenu					          " show list instead of just completing
  set wildmode=longest,full	      " command <Tab> completion, then longest common part, then all.
  set wildignore=*.zip,*.exe,*.dll
  set whichwrap=b,s,h,l,<,>,[,]	  " backspace and cursor keys wrap to
  set scrolljump=5 				        " lines to scroll when cursor leaves screen
  set scrolloff=3 				        " minimum lines to keep above and below cursor
  set foldenable  				        " auto fold code
  set gdefault					          " the /g flag on :s substitutions by default
  set nolist                      " Don't show tabs as ^I and line endings as $
" }

" Formatting {
  set wrap                         " wrap long lines
  set autoindent                   " indent at the same level of the previous line
  set shiftwidth=2                 " use indents of 2 spaces
  set expandtab                    " tabs are spaces, not tabs
  set tabstop=2                    " an indentation every two columns
  set softtabstop=2                " let backspace delete indent
  set pastetoggle=<F12>            " pastetoggle (sane indentation on pastes)
  set comments=sl:/*,mb:*,elx:*/   " auto format comment blocks " Remove trailing whitespaces and ^M chars

  au FileType c,cpp,java,php,js,python,twig,xml,yml au BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
" }

" Shell {
  if executable('rg')
    command! -nargs=+ GitRg execute 'lcd ' . substitute(system('git rev-parse --show-toplevel'), '\n', '', '') | execute 'lgrep <args>' | copen

    set grepprg=rg\ -H\ --no-heading\ --vimgrep\ -i
    set grepformat=%f:%l:%c:%m
  endif
" }

" Key (re)mappings {
  " De facto leader
  let mapleader = ','
  " Skip a redundant shift
  nnoremap ; :
  " <ESC> insert mode from the comfort of home row :-) while having a no-op in normal mode
  imap kj <esc>

  " Easier moving in tabs and windows
  map <C-j> <C-W>j
  map <C-k> <C-W>k
  map <C-l> <C-W>l
  map <C-h> <C-W>h

  " Edit _vimrc configuration file
  nmap <leader>ev :e $MYVIMRC<CR>

  " Wrapped lines goes down/up to next row, rather than next line in file.
  nnoremap j gj
  nnoremap k gk

  " Easily delete current buffer without closing the view
  nmap <silent> <leader>d :bp\|bd #<CR>

  " Easily close the view without deleting current buffer
  nmap <silent> <leader>c :q<CR>

  " Home is where the start is
  nmap <leader>h :Startify<CR>

  " Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

  """ Code folding options
  nmap <leader>f0 :set foldlevel=0<CR>
  nmap <leader>f1 :set foldlevel=1<CR>
  nmap <leader>f2 :set foldlevel=2<CR>
  nmap <leader>f3 :set foldlevel=3<CR>
  nmap <leader>f4 :set foldlevel=4<CR>
  nmap <leader>f5 :set foldlevel=5<CR>
  nmap <leader>f6 :set foldlevel=6<CR>
  nmap <leader>f7 :set foldlevel=7<CR>
  nmap <leader>f8 :set foldlevel=8<CR>
  nmap <leader>f9 :set foldlevel=9<CR>

  "clearing highlighted search
  nmap <silent> <leader>/ :nohlsearch<CR>

  " visual shifting (does not exit Visual mode)
  vnoremap < <gv
  vnoremap > >gv 

  " For when you forget to sudo.. Really Write the file.
  cmap w!! w !sudo tee % >/dev/null

  " ctrl is too hard to reach
  nmap <leader>v :Ve<CR>
  nmap <leader>s :Se<CR>

  " Specifically search buffers
  nnoremap <leader>p :CtrlPBuffer<CR>

  " Several terminals
  let bash_term = !has('win32') && !has('win64') ? 'bash' : 'wsl -d Ubuntu'
  execute 'nmap <leader>b :term ++close ' . bash_term . '<CR>'
  nmap <leader>tb :term ++close "C:/Program Files/Git/bin/bash.exe"<CR>
  execute 'nmap <leader>tu :vert term ++close ' . bash_term . '<CR>'
  nmap <leader>tc :term ++close cmd<CR>
  nmap <leader>tp :term ++close pwsh<CR>
  nmap <leader>u :w<CR>:term ++close pwsh -NoProfile -Command "cd ..; Invoke-Pester -Output Detailed; read-host"<CR>

  "search repo
  nmap <leader>f :silent lgrep<space>
  nmap <leader>g :silent lgrep! <cword><CR>:lopen<CR>

  tmap <C-V> <C-W>"+
  tmap <C-j> <C-W>j
  tmap <C-k> <C-W>k
  tmap <C-l> <C-W>l
  tmap <C-h> <C-W>h

  tmap <RightMouse> <C-W>"+

  tnoremap KJ <c-\><c-n>
  " https://github.com/onivim/oni/issues/2342
  tnoremap <s-space> <space>

  " https://vi.stackexchange.com/a/22505/36906
  nnoremap gx :!start <cWORD><CR><CR>
" }

" Plugins {
  " Ctags {
    " This will look in the current directory for 'tags', and work up the tree towards root until one is found. 
    set tags=./tags,tags;/,$HOME/vimtags
    map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> " C-\ - Open the definition in a new tab
    map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>      " A-] - Open the definition in a vertical split
  " }

  " Ctrl-P {
    let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files -oc --exclude-standard']

    if executable('rg')
      " Use rg in CtrlP for listing files, respects .gitignore
      let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
      let g:ctrlp_use_caching = 0
    endif

    let g:ctrlp_max_files=0
    let g:ctrlp_clear_cache_on_exit = 1
  " }

  " Startify {
    if !has('win32') && !has('win64') && has($TERM)
      let g:startify_bookmarks = [ 
        \{ 's1': 'e:/src/'},
      \]
    else
      let g:startify_bookmarks = [ 
      \]
    endif

    let g:startify_files_number = 20
  " } 

  "Terraform {
    nmap <leader>tf :TerraformFmt<CR>
  " }

  "NERDTree {
    let g:NERDTreeNodeDelimiter = "\u00a0"
  " }

  "NETRW {
    let ghregex='\(^\|\s\s\)\zs\.\S\+'
    let g:netrw_list_hide=ghregex
  " }

  "easy align {
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

    " Format markdown table
    au FileType markdown nmap <leader><bslash> gaip*<bar><CR>
  " }
" }

" GUI Settings {
  if has('gui_running')
    set guioptions-=T " remove the toolbar
    set guioptions-=m " remove the menu
    set guioptions+=! "Use internal terminal to run external scripts
  endif
" }

" Initialize directories {
function! InitializeDirectories()
  let separator = "."
  let parent = $HOME
  let prefix = '.vim'
  let dir_list = { 
    \ 'backup': 'backupdir', 
    \ 'views': 'viewdir', 
    \ 'swap': 'directory' }

  for [dirname, settingname] in items(dir_list)
    let directory = parent . '/' . prefix . dirname . "/"
    if exists("*mkdir")
      if !isdirectory(directory)
        call mkdir(directory)
      endif
    endif
    if !isdirectory(directory)
      echo "Warning: Unable to create backup directory: " . directory
      echo "Try: mkdir -p " . directory
    else  
      let directory = substitute(directory, " ", "\\\\ ", "")
      exec "set " . settingname . "=" . directory
    endif
  endfor
endfunction
call InitializeDirectories() 
" }

" Use local vimrc if available {
  if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
  endif
" }
